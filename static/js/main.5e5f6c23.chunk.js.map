{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","BASE_URL","request","a","fetch","response","ok","Error","status","statusText","json","FindMovie","addMovie","useState","setMovie","error","setError","query","setQuery","isMoviePresentInTheList","setMoviePresent","getMovieFromServer","movieFromServer","Response","Title","Plot","imbdId","imdbID","Poster","addNewMovie","event","preventDefault","find","initialMovie","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","onClick","App","data","setMovies","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e5f6c23.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description,\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const key = '6ae5f894';\n\nconst BASE_URL = `https://www.omdbapi.com/?apikey=${key}&t=`;\n\nexport const request = async(title) => {\n  const response = await fetch(`${BASE_URL}${title}`);\n\n  try {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { request } from '../../api/api';\n\nexport const FindMovie = ({ addMovie, movies }) => {\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(true);\n  const [query, setQuery] = useState('');\n  const [isMoviePresentInTheList, setMoviePresent] = useState(false);\n\n  const handleSearchTitle = (event) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    setError(false);\n    setMoviePresent(false);\n  };\n\n  const getMovieFromServer = async() => {\n    const movieFromServer = await request(query);\n\n    if (movieFromServer.Response === 'False') {\n      setError(true);\n\n      return;\n    }\n\n    setMovie({\n      title: movieFromServer.Title,\n      description: movieFromServer.Plot,\n      imbdId: movieFromServer.imdbID,\n      imgUrl: movieFromServer.Poster,\n      imdbUrl: `https://www.imdb.com/title/${movieFromServer.imdbID}`,\n    });\n    setError(false);\n  };\n\n  const addNewMovie = (event) => {\n    event.preventDefault();\n    if (!movie) {\n      setError(true);\n\n      return;\n    }\n\n    if (movies.find(initialMovie => (initialMovie.title === movie.title))) {\n      setMoviePresent(true);\n\n      return;\n    }\n\n    addMovie([...movies, movie]);\n\n    setQuery('');\n    setMovie(null);\n    setError(false);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={addNewMovie}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-danger\"\n              value={query}\n              onChange={handleSearchTitle}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={getMovieFromServer}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={addNewMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {!error && (\n        <div className=\"container\">\n          {isMoviePresentInTheList\n            && 'This movie is already present in the list'}\n          <h2 className=\"title\">Preview</h2>\n          {!error && movie && (\n            <MovieCard {...movie} />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        {movies.length > 0 && (\n          <MoviesList movies={movies} />\n        )}\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={setMovies} movies={movies} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}